// According to https://www.st.com/resource/en/datasheet/stm32f303re.pdf,
// flash at 0x0800 0000 is 512 kB and sram at 0x2000 0000 is 64 kB.

flash: Memory.MappedMemory @ sysbus 0x08000000
    size: 0x80000

sram: Memory.MappedMemory @ sysbus 0x20000000
    size: 0x10000

nvic: IRQControllers.NVIC @ sysbus 0xE000E000
    priorityMask: 0xF0
    systickFrequency: 72000000
    IRQ -> cpu@0

cpu: CPU.CortexM @ sysbus
    cpuType: "cortex-m4"
    nvic: nvic

usart1: UART.STM32F7_USART @ sysbus <0x40013800, +0x400>
    -> nvic@37

usart2: UART.STM32F7_USART @ sysbus <0x40004400, +0x400>
    -> nvic@38

usart3: UART.STM32F7_USART @ sysbus <0x40004800, +0x400>
    -> nvic@39

uart4: UART.STM32F7_USART @ sysbus <0x40004C00, +0x400>
    -> nvic@52

uart5: UART.STM32F7_USART @ sysbus <0x40005000, +0x400>
    -> nvic@53

can: CAN.STMCAN @ sysbus <0x40006400, +0x400>
    [0-3] -> nvic@[19-22]

exti: IRQControllers.EXTI @ sysbus 0x40010400
    [0-6] -> nvic@[6-10, 23, 40]

gpioPortA: GPIOPort.STM32_GPIOPort @ sysbus <0x48000000, +0x400>
    modeResetValue: 0xA8000000
    outputSpeedResetValue: 0x0C000000
    pullUpPullDownResetValue: 0x64000000
    [0-15] -> exti@[0-15]

gpioPortB: GPIOPort.STM32_GPIOPort @ sysbus <0x48000400, +0x400>
    modeResetValue: 0x00000280
    outputSpeedResetValue: 0x000000C0
    pullUpPullDownResetValue: 0x00000100
    [0-15] -> exti@[0-15]

gpioPortC: GPIOPort.STM32_GPIOPort @ sysbus <0x48000800, +0x400>
    [0-15] -> exti@[0-15]

gpioPortD: GPIOPort.STM32_GPIOPort @ sysbus <0x48000C00, +0x400>
    [0-15] -> exti@[0-15]

gpioPortE: GPIOPort.STM32_GPIOPort @ sysbus <0x48001000, +0x400>
    [0-15] -> exti@[0-15]

gpioPortF: GPIOPort.STM32_GPIOPort @ sysbus <0x48001400, +0x400>
    [0-15] -> exti@[0-15]

gpioPortG: GPIOPort.STM32_GPIOPort @ sysbus <0x48001800, +0x400>
    [0-15] -> exti@[0-15]

gpioPortH: GPIOPort.STM32_GPIOPort @ sysbus <0x48001C00, +0x400>
    [0-15] -> exti@[0-15]

spi1: SPI.STM32SPI @ sysbus 0x40013000
    -> nvic@35

spi2: SPI.STM32SPI @ sysbus 0x40003800
    -> nvic@36

spi3: SPI.STM32SPI @ sysbus 0x40003C00
    -> nvic@51

spi4: SPI.STM32SPI @ sysbus 0x40013C00
    -> nvic@84

dma1: DMA.STM32DMA @ sysbus 0x40020000
    [0-6] -> nvic@[11-17]

dma2: DMA.STM32DMA @ sysbus 0x40020400
    [0-4] -> nvic@[56-60]

i2c1: I2C.STM32F4_I2C @ sysbus 0x40005400
    EventInterrupt -> nvic@31
    ErrorInterrupt -> nvic@32

i2c2: I2C.STM32F4_I2C @ sysbus 0x40005800
    EventInterrupt -> nvic@33
    ErrorInterrupt -> nvic@34

i2c3: I2C.STM32F4_I2C @ sysbus 0x40007800
    EventInterrupt -> nvic@72
    ErrorInterrupt -> nvic@73

rtc: Timers.STM32F4_RTC @ sysbus 0x40002800
    AlarmIRQ -> nvic@41

// `rcc` block taken over from
// https://github.com/renode/renode/blob/19349fdcf8f152fe651126952f67a0a38b0caea5/platforms/cpus/stm32f0.repl#L147-L165
rcc: Python.PythonPeripheral @ sysbus 0x40021000
    size: 0x400
    initable: true
    script: '''
if request.isInit:
    lastVal = 0     
elif request.isRead:               
    lastVal = 1 - lastVal
    if request.offset == 0x0:
        request.value = lastVal * 0x83
    elif request.offset == 0x4:
        request.value = lastVal * 0xFFFFFFF8
    elif request.offset == 0x24:
        request.value = 0x0
    else:
        request.value = lastVal * 0xFFFFFFFF

self.NoisyLog("%s on FLIPFLOP at 0x%x, value 0x%x" % (str(request.type), request.offset, request.value))
'''

timer1: Timers.STM32_Timer @ sysbus <0x40012C00, +0x400>
    frequency: 10000000
    initialLimit: 0xFFFF

timer2: Timers.STM32_Timer @ sysbus <0x40000000, +0x400>
    -> nvic@28
    frequency: 10000000
    initialLimit: 0xFFFFFFFF

timer3: Timers.STM32_Timer @ sysbus <0x40000400, +0x400>
    -> nvic@29
    frequency: 10000000
    initialLimit: 0xFFFF

timer4: Timers.STM32_Timer @ sysbus <0x40000800, +0x400>
    -> nvic@30
    frequency: 10000000
    initialLimit: 0xFFFF

timer6: Timers.STM32_Timer @ sysbus <0x40001000, +0x400>
    -> nvic@54
    frequency: 10000000
    initialLimit: 0xFFFF

timer7: Timers.STM32_Timer @ sysbus <0x40001400, +0x400>
    -> nvic@55
    frequency: 10000000
    initialLimit: 0xFFFF

timer8: Timers.STM32_Timer @ sysbus <0x40013400, +0x400>
    frequency: 10000000
    initialLimit: 0xFFFF

timer15: Timers.STM32_Timer @ sysbus <0x40014000, +0x400>
    frequency: 10000000
    initialLimit: 0xFFFF

timer16: Timers.STM32_Timer @ sysbus <0x40014400, +0x400>
    frequency: 10000000
    initialLimit: 0xFFFF

timer17: Timers.STM32_Timer @ sysbus <0x40014800, +0x400>
    frequency: 10000000
    initialLimit: 0xFFFF

timer20: Timers.STM32_Timer @ sysbus <0x40015000, +0x400>
    frequency: 10000000
    initialLimit: 0xFFFF