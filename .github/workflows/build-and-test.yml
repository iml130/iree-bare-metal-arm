name: Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  TOOLCHAIN: gcc-arm-none-eabi
  TOOLCHAIN_VERSION: 10.3-2021.10
  RENODE: renode
  RENODE_VERSION: 1.12.0
  VENV_IREE: venv-iree
  VENV_RENODE: venv-renode
  IREE_HOST_INSTALL: build-iree-host-install

jobs:
  install-toolchain:
    name: Install GNU Arm Embedded Toolchain
    runs-on: ubuntu-20.04

    steps:
    - name: Cache Toolchain
      id: cache-toolchain
      uses: actions/cache@v2
      with:
        path: ${{ env.TOOLCHAIN }}
        key: ${{ runner.os }}-${{ env.TOOLCHAIN }}-${{ env.TOOLCHAIN_VERSION }}

    - name: Install GNU Arm Embedded Toolchain
      if: steps.cache-toolchain.outputs.cache-hit != 'true'
      run: |
        wget -q https://developer.arm.com/-/media/Files/downloads/gnu-rm/${{ env.TOOLCHAIN_VERSION }}/gcc-arm-none-eabi-${{ env.TOOLCHAIN_VERSION }}-x86_64-linux.tar.bz2
        tar xfj gcc-arm-none-eabi-${{ env.TOOLCHAIN_VERSION }}-x86_64-linux.tar.bz2
        mv gcc-arm-none-eabi-${{ env.TOOLCHAIN_VERSION }} ${{ env.TOOLCHAIN }}

  install-renode:
    name: Install Renode
    runs-on: ubuntu-20.04

    steps:
    - name: Cache Renode
      id: cache-renode
      uses: actions/cache@v2
      with:
        path: |
          ${{ env.VENV_RENODE }}
          ${{ env.RENODE }}
        key: ${{ runner.os }}-${{ env.RENODE }}-${{ env.RENODE_VERSION }}

    - name: Install Renode
      if: steps.cache-renode.outputs.cache-hit != 'true'
      run: |
        wget -q https://github.com/renode/renode/releases/download/v${{ env.RENODE_VERSION }}/renode-${{ env.RENODE_VERSION }}.linux-portable.tar.gz
        tar xf renode-${{ env.RENODE_VERSION }}.linux-portable.tar.gz
        mv renode_${{ env.RENODE_VERSION }}_portable ${{ env.RENODE }}
        python3 -m venv ${{ env.VENV_RENODE }}
        source ${{ env.VENV_RENODE }}/bin/activate
        pip install -r ${{ env.RENODE }}/tests/requirements.txt

  install-snapshot:
    name: Install IREE snaphot
    runs-on: ubuntu-20.04

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        path: ${{ env.REPO }}

    - name: Cache IREE Snapshot
      id: cache-snapshot
      uses: actions/cache@v2
      with:
        path: |
          ${{ env.VENV_IREE }}
          ${{ env.IREE_HOST_INSTALL }}
        key: ${{ runner.os }}-iree-snapshot-${{ hashFiles('requirements.txt') }}

    - name: Install IREE Snapshot
      if: steps.cache-snapshot.outputs.cache-hit != 'true'
      run: |
        python3 -m venv ${{ env.VENV_IREE }}
        source ${{ env.VENV_IREE }}/bin/activate
        pip install -r requirements.txt

    - name: Install Dependencies
      if: steps.cache-snapshot.outputs.cache-hit != 'true'
      run: |
        sudo apt update
        sudo apt install cmake clang ninja-build

    - name: Install IREE Tools
      if: steps.cache-snapshot.outputs.cache-hit != 'true'
      run: |
        git submodule update --init -- third_party/iree
        cd third_party/iree
        git submodule update --init -- third_party/googletest
        git submodule update --init -- third_party/flatcc
        git submodule update --init -- third_party/libyaml
        git submodule update --init -- third_party/vulkan_headers
        cd ../../
        mkdir ${{ env.IREE_HOST_INSTALL }}-build
        mkdir -p ${{ env.IREE_HOST_INSTALL }}/bin
        cd ${{ env.IREE_HOST_INSTALL }}-build
        cmake -GNinja \
              -DCMAKE_C_COMPILER=clang \
              -DCMAKE_CXX_COMPILER=clang++ \
              -DIREE_ERROR_ON_MISSING_SUBMODULES=OFF \
              -DIREE_ENABLE_THREADING=OFF \
              -DIREE_HAL_DRIVER_DEFAULTS=OFF \
              -DIREE_BUILD_COMPILER=OFF \
              -DIREE_BUILD_SAMPLES=OFF \
              -DIREE_BUILD_TESTS=OFF \
              ../third_party/iree/
        cmake --build . --target generate_embed_data iree-flatcc-cli
        cp build_tools/embed_data/generate_embed_data ../${{ env.IREE_HOST_INSTALL }}/bin
        cp build_tools/third_party/flatcc/iree-flatcc-cli ../${{ env.IREE_HOST_INSTALL }}/bin

  build:
    name: Build Samples
    needs: [install-toolchain, install-snapshot]
    runs-on: ubuntu-20.04

    steps:
    - name: Configure environment
      run: echo "${GITHUB_WORKSPACE}/${{ env.TOOLCHAIN }}/bin" >> ${GITHUB_PATH}

    - name: Install Dependencies
      run: |
        sudo apt update
        sudo apt install cmake ninja-build

    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        path: ${{ env.REPO }}
        submodules: 'true'

    - name: Initalize submodules
      run : |
        cd third_party/iree
        git submodule update --init -- third_party/googletest
        git submodule update --init -- third_party/flatcc
        git submodule update --init -- third_party/libyaml
        git submodule update --init -- third_party/vulkan_headers

    - name: Cache Toolchain
      id: cache-toolchain
      uses: actions/cache@v2
      with:
        path: ${{ env.TOOLCHAIN }}
        key: ${{ runner.os }}-${{ env.TOOLCHAIN }}-${{ env.TOOLCHAIN_VERSION }}

    - name: Cache IREE Snapshot
      id: cache-snapshot
      uses: actions/cache@v2
      with:
        path: |
          ${{ env.VENV_IREE }}
          ${{ env.IREE_HOST_INSTALL }}
        key: ${{ runner.os }}-iree-snapshot-${{ hashFiles('requirements.txt') }}

    - name: Build with CMSIS for STM32F4xx
      run: |
        source ${{ env.VENV_IREE }}/bin/activate
        mkdir build-cmsis
        cd build-cmsis
        export PATH_TO_ARM_TOOLCHAIN="$GITHUB_WORKSPACE/${TOOLCHAIN}"
        ../build_tools/configure_stm32.sh cmsis stm32f4xx
        cmake --build . --target \
          sample_vmvx_sync \
          sample_embedded_sync \
          sample_static_library \
          sample_static_library_c

    - name: Upload CMSIS build artifact for STM32F4xx
      uses: actions/upload-artifact@master
      with:
        name: cmsis-stm32f4xx-build-artifact
        path: |
          build-cmsis/samples/simple_embedding/sample_vmvx_sync
          build-cmsis/samples/simple_embedding/sample_embedded_sync
          build-cmsis/samples/static_library/sample_static_library
          build-cmsis/samples/static_library/sample_static_library_c

    - name: Build with crt0.s for STM32F4xx
      run: |
        source ${{ env.VENV_IREE }}/bin/activate
        mkdir build-crt0
        cd build-crt0
        export PATH_TO_ARM_TOOLCHAIN="$GITHUB_WORKSPACE/${TOOLCHAIN}"
        ../build_tools/configure_stm32.sh crt0 stm32f4xx
        cmake --build . --target \
          sample_vmvx_sync \
          sample_embedded_sync \
          sample_static_library \
          sample_static_library_c

    - name: Upload crt0.s build artifact for STM32F4xx
      uses: actions/upload-artifact@master
      with:
        name: crt0-stm32f4xx-build-artifact
        path: |
          build-crt0/samples/simple_embedding/sample_vmvx_sync
          build-crt0/samples/simple_embedding/sample_embedded_sync
          build-crt0/samples/static_library/sample_static_library
          build-crt0/samples/static_library/sample_static_library_c

    - name: Build with libopencm3 for STM32F4xx
      run: |
        source ${{ env.VENV_IREE }}/bin/activate
        mkdir build-libopencm3
        cd build-libopencm3
        export PATH_TO_ARM_TOOLCHAIN="$GITHUB_WORKSPACE/${TOOLCHAIN}"
        ../build_tools/configure_stm32.sh libopencm3 stm32f4xx
        cmake --build . --target \
          sample_vmvx_sync \
          sample_embedded_sync \
          sample_static_library \
          sample_static_library_c

    - name: Upload libopencm3 build artifact for STM32F4xx
      uses: actions/upload-artifact@master
      with:
        name: libopencm3-stm32f4xx-build-artifact
        path: |
          build-libopencm3/samples/simple_embedding/sample_vmvx_sync
          build-libopencm3/samples/simple_embedding/sample_embedded_sync
          build-libopencm3/samples/static_library/sample_static_library
          build-libopencm3/samples/static_library/sample_static_library_c
    
    - name: Generate build stats
      run: python3 build_tools/generate_build_stats.py

    - name: Upload build stats artifact
      uses: actions/upload-artifact@master
      with:
        name: build-stats
        path: build_stats.json

  test:
    name: Test Samples
    needs: [install-renode, build]
    runs-on: ubuntu-20.04

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        path: ${{ env.REPO }}

    - name: Cache Renode
      id: cache-renode
      uses: actions/cache@v2
      with:
        path: |
          ${{ env.VENV_RENODE }}
          ${{ env.RENODE }}
        key: ${{ runner.os }}-${{ env.RENODE }}-${{ env.RENODE_VERSION }}

    - name: Download CMSIS build artifact for STM32F4xx
      uses: actions/download-artifact@master
      with:
        name: cmsis-stm32f4xx-build-artifact
        path: build-cmsis/samples

    - name: Download crt0.s build artifact for STM32F4xx
      uses: actions/download-artifact@master
      with:
        name: crt0-stm32f4xx-build-artifact
        path: build-crt0/samples

    - name: Download libopencm3 build artifact for STM32F4xx
      uses: actions/download-artifact@master
      with:
        name: libopencm3-stm32f4xx-build-artifact
        path: build-libopencm3/samples

    - name: Run Renode tests
      run: |
        source ${{ env.VENV_RENODE }}/bin/activate
        ${{ env.RENODE }}/test.sh --variable BASE_DIR:$GITHUB_WORKSPACE --exclude NoCI tests/*.robot

    - name: Delete CMSIS build artifact for STM32F4xx
      uses: geekyeggo/delete-artifact@v1
      with:
        name: cmsis-stm32f4xx-build-artifact

    - name: Delete crt0.s build artifact for STM32F4xx
      uses: geekyeggo/delete-artifact@v1
      with:
        name: crt0-stm32f4xx-build-artifact

    - name: Delete libopencm3 build artifact for STM32F4xx
      uses: geekyeggo/delete-artifact@v1
      with:
        name: libopencm3-stm32f4xx-build-artifact
